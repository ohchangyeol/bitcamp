 
    package 패키지이름
	//폴더=패키지:독창적인 이름을 같는다 대소문자 구분불가 소문자로 작성
    //[사내시스템(네이버):com.naver.ooo] 

	public / private 상위 클래스 
	{
	//클래스는 public / private 만 사용가능 (default /protected 사용불가)
	}
	

	public class  하위클래스이름 extends 상위클레스이름//상속
	{
		
		// 클레스Field
		필드1 데이터타입	필드1이름	=  필드1데이터[생략가능] ;
		필드2 private 데이터타입	필드2이름	=  필드2데이터[생략가능] ; //private 상속불가
		필드3 static 데이터타입	필드3이름	=  필드3데이터[생략가능] ;// 스태틱화(공유)
		필드4 final 데이터타입	필드3이름	=  필드3데이터[생략가능] ;// 외부수정불가
			.
			.

		// Constructor[기본 생성자 :만들지 않아도 자동생성됨]
		public 클레스이름(){    
		}


		// Constructor[생성자] - 필드 1개 값을 받아서 변경가능
		public 클레스이름( 필드1데이터타입	 필드1외부에서밀어주는값){
			// 클레스필드중 필요한것만 재정의 [본인선택]
			필드1이름 = 재정의 이름
			재정의 이름 = 필드1외부에서밀어주는값 ;

			필드1이름	=	 필드1외부에서밀어주는값 ;
		}


		// Constructor[생성자] - 필드 2개 값 받아서 변경가능
		public 클레스이름( 필드1데이터타입  필드1외부에서밀어주는값,  필드2데이터타입  필드2외부에서밀어주는값){
			// 클레스필드중 필요한것만 재정의 [본인선택]
			super.필드1이름	=	 필드1외부에서밀어주는값 ;//상속해준 상위클레스에 필드값
			this.필드2이름	=	 필드2외부에서밀어주는값;//자기자신 클레스의 필드값
				.
				.
		}	//생성자는 외부에서 받는 값의 데이터 타입과 갯수로 오버로딩		


		//Method [기능]
		public	리턴데이터타입	 메소드1이름 (){
				~ 기능구현 ~
				return	  결과 [리턴데이터타입] ;
		}


		public	리턴데이터타입	 메소드2이름	(데이터1타입  외부에서받는데이터1(<매개변수)){
				~ 기능구현 ~
				return	   결과 [리턴데이터타입] ;
		}


		public	리턴데이터타입	 메소드3이름	 (데이터1타입	 외부에서받는데이터1,	 데이터2타입	 외부에서받는데이터2){
				~ 기능구현 ~
				return		결과 [리턴데이터타입] ;
		}

		public void 메소드4이름 (){
				~ 기능구현 ~
				return	  [리턴데이터타입이 void일시 생략가능] 
		}


		// Method Main [실행시 필요한 메소드 (항상 같은 문구)]
		public	static void main(String[] args) {

				//static 접근 [ 문법 >> 클래스이름 . 스테틱 지정이된 필드,메소드,초기화 블럭 이름 ]
				클래스이름 변수1이름 = 클래스이름.스테틱이 지정된 필드;
				클래스이름 변수2이름 = 클래스이름.스테틱이 지정된 메소드(메소드로 밀어주는 값);
				클래스이름 변수3이름 = 클래스이름.스테틱이 지정된 초기화블럭;

				//인스턴스 생성
				클레스이름   변수1이름  =  new  클레스이름() ;
				클레스이름   변수2이름  =  new  클레스이름(생성자로 밀어주는값1) ;
				클레스이름   변수3이름  =  new  클레스이름(생성자로 밀어주는값1,  생성자로 밀어주는값2) ;

				//인스턴스 내부 필드 접근 [ 문법 >> 변수 . 필드이름]
				변수1 . 필드1이름  ;
				변수1 . 필드2이름  ;
				변수1 . 필드3이름  ;

				//인스턴스 기능실행 [ 문법 >> 변수 . 메소드이름()]
				변수2 . 메소드1이름() ;
				변수2 . 메소드2이름(메소드2로 주는데이터1) ;
				변수2 . 메소드3이름(메소드3로 주는데이터1, 메소드3로 주는데이터2) ;			
				
                //해당 위치 접근
				this()                    - 생성시 값을 받을수도 있음
				this.필드1              - 필드접근
				this.메소드1이름()    - 메소드실행

                //상위 위치 접근 [ 상위 개념이 존재하는 경우]
				super()                                                 - 생성시 값을 받을수도 있음
				super.필드1                                           - 필드접근
				super.메소드2이름(메소드2로 주는데이터1)   - 메소드실행

				// Modifier [접근제어자]
				private       -  같은 클레스 접근가능
				default       -  같은 패키지 접근가능 
				protected   -  같은 패키지 접근가능 또는 다른 패키지에서 해당클레스 상속 받아서 접근 가능
				public        -  누구나 접근 가능
				//
				static         -  클래스 변수로 인스턴스 관계없이 값을 갖어 공유한다 (필드,메소드,초기화 블럭사용) 
				final           -  마지막/변경불가 필드수정불가 메서드 오버라이딩 불가(클래스,메소드,필드,지역변수사용)



		}
