1. OOP(Object Oriented Programming)
	객체 지향의 사전적 의미는 데이터를 추상화시켜 상태와 행위를 가진 객체를 만들고 그 객체들이 유기적인 상호작용을 통해 로직을 구성하는 프로그래밍이다.
	사전적 의미를 읽고 내가 생각하는 객체 지향의 표현은 예시로 영혼이 있고 그 영혼을 사람한테 넣어 그런 사람들을 모아 유기적인 상호작용을 시키는 것 같은 느낌이 든다.
	
	** 특 징 **
	-모든 데이터를 객체로 취급하고 그 객체를 연결하여 사용하는 프로그래밍 언어.
	-코드들의 재사용성, 중복제거가 가장 크다.(가독성)
	-유지보수하기 편할것 같은 느낌..?
	==============================================================================================================
	~OOP = real world를 표현하는 방법 론~
	한줄 정리=> 무언가를 만들때 추상한( abstraction ) 것을 이름,상태,행동( object )을 추출 후 object의 공통된 개념을 찾아( Generalization ) 묶고 그 안에 특징적인것을 세분화 (Specialization) 시키고 그것에 대한 기능( method )이나 상태, 행동(obj)들을 구체적으로 만들고그것을 실행( Realization )했을 때 결과가 다른 상태나, 행동에 연관성(Association)을 갖을 수도 있지않을까?이게 조금 강의 듣고 찾아보고 검색한거랑 조합을 했을때 이런 느낌? 인거같았다.

	예를들어 게임을 만든다 가정하면 게임에 각 직업(전사,법사,궁수 등등...),스토리,사냥,퀘스트 등이 있을것이다. 이것을 분류하는것이 'abstraction(추상화)' 라고 한다. 그 직업이 낄수있는 아이템, 상태등 'object(객체)' 라 하고 그리고 그 직업이 수행하는 행동들(공격하기,스킬, 맞기)을 'method' 라 한다. 이 행위들이 다같이 정의하는 것을 Encapuslation(캡슐화), 이것들을 묶는 도구를 'class'라 한다. 그 직업안에 전사,법사,궁수등을 세부적으로 나누는것을 'Specialization (구체화)', 전사는 공격을 한다라는 것이 절차은닉 이고 전사의 착용할 수 있는 무기의 특성을 바꾸지 못하게 하는 것을 정보은닉에 한 특징이다. 전사는 직업들이 갖고있는 공격이 라는것이 있다 라는것을 'Inheritance(상속)' 이라하고 상속받은 것을 전사가 행동했을 때 이것을 'Realization(구현)'이 한다. 전사가 가지고있는 버프스킬이 다른 직업(class)에 영향이 간다면 'Association(관계)'라 한다. 각각 다른 직업에 아이템은 검이 될수도 있고, 지팡이가 될수도 있고, 석궁이 될수도 있다. 이것을 'Polymorphism(다형성)'이라 부른다.이 모든것을 bean 이라고 부르고, app에 bean 을 instance한것을 'object'라고 해서 이것을 표현한 방법론이 OOP(Object Oriented Programming)객체 지향 프로그래밍 이라 하는것이 아닐까 ! 하는 생각?

	***OOP 정말 중요한 특징 - 객체는 서로 다른 상태를 갖는다.***

2. Object(객체)
	Object는 객체지향에서는 추상적인 객체라고 생각 한다.
	특징으로는 자신과 다른 것을 식별할 수 있고, 추상적인 것뿐만이 아니라 물리적으로 존재하는 것도 객체화할 수 있다 한다.
	==============================================================================================================
	obj라는 형태안에 식별, 상태, 행위 이렇게 나눠진다.
	real world 에 존재하는 모든 것.
	행위를 제외한 물리적인것과 개념적인것이 존재.

3. Class 
	내가 찾아보고 이해한 class는 틀에 더 가깝다고 생각하는 게 더 편할 것 같다.
	메서드와 사용되는 변수를 class 안에 넣어 정리하기 좋고 재사용성이 좋아 틀이라고 생각할수도 있고, class 안에 메서드와 변수를 구성하고 그에 맞게 설계하는 설계도 같은 느낌일수도 있다. 자신의 상황에 맞게 생각 하면 될 것 같다.
	==============================================================================================================
	class 를 사용하는것이 instance.... OK...
	
4. abstraction(추상화)
 
	class랑 연관성이 높다. 
	객체의 특징을 찾고, 이름, 상태, 행위를 분류하는 것. 대체적으로 generalization과 연광성이 아주 높다.

5. Generalization(일반화) / Inheritance(상속)
	Generalization	               
		       shape
	    	         ㅣ
	    ㅣㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅣㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅣ
	  square     Circle        Triangle
	
	  사각형, 원형, 삼각형가 있는데 그것을 도형이라는 속성이 일반화 되어있다.
	  많은 것을 검색해본 결과 이 그림을 보며 이해하는 것이 제일 잘 들어왔다.

	Inheritance
	 -상속을 할 때 가장 중요한 것은 A is Kind of B
	  A가 B의 종류 중에 하나인가를 생각 하면 된다.
	  사각형과 원형과 삼각형은 도형이다. 이것은 관계의 개념이다.
	  도형이 갖고있는 attribute 를 삼각형이 사용할 수 있냐 없냐, 이게 상속.
	

6.  Specialization(구체적)
	일반화와 다르게 세분화 시키는 것.
 	위의 그림으로 예시를 든다면 도형엔 색깔과 크기가 각각 다르다. 그것을 세분화 시켜 파란색, 빨간색, 노란색 이런식으로 세분화하는게 아닐까 하는 생각이 든다.
	class 별로 쪼개고 분류하기 위해 구체적으로 나누기 때문에 아닐까 하는 생각이 든다.
	
7. Realization (추상화 된 것의 구현)
 	음 내가 생각하는게 맞다면, bean을 app에 불러와 instance하고 instance한 class안에 Obj, Method를 호출하는것을 Realization 이라 하는것이 아닐까 하는 생각?이다.
	
8. Association
  	관계에선 Generalization,Specialization 관련이 높다.
	아래서 위로 올라갈수록 일반화 되고 위에서 아래로 내려갈땐 점점 구체적으로 된다. 위에서 아래로 내려갈땐 구체적으로 나눠진다.
	위에(조상클래스) 갖고있는 모든것(매개변수, 메서드)을 상속 받는다. 
	하위클래스에서 상위클래스로 올라갈땐 ~is a~ 자식클래스는 조상클래스이다. 
	상위클래스는 하위클래스를 대신할수 없음 ~has a~ => 상위클래스는 하위클래스를 가지고있다. 
	이게 Polymorphism 때문에 가능하다.

	상속관계 (is a) - 자식클래스에서 상위 클래스를 표현하는 방법.
	- 꽃은 국화다. (x)
	- 국화는 꽃이다.(o)
	
	포함관계(has a) - 조상클래스에서 자식클래스를 표현하는 방법.
	- 동물은 사람을 가지고있다. (o)
	- 사람은 동물을 가지고있다. (x) 

	동물 a= new 동물(ㅇ)
		new 사람(ㅇ)
	사람 b= new 사람(ㅇ)
		new 동물(x)

상속관계 (~ is a ) = ~은 ~이다 ==>자식 클래스에서 상위 클래스를 표현하는 방법.
		사람은 동물이다.
		(하위) (상위)
		
포함관계 (~ has a) = ~은 ~을 가지고있다. ==> 조상 클래스에서 자식 클래스를 표현하는 방법.
		동물은 사람을 가지고있다.
		(상위)  (하위)

9. dependency (의존)
	두 클래스 간의 연결고리 같은 느낌? 감자클래스와 밭클래스가 있을때 밭에는 심는다 라는 method가 있고 감자한텐 자기의 이름과 10일뒤자라나다 라는 method가 있다 가정하였을때 밭에있는 심는다라는 메서드에 감자를 인자값으로 받아와 감자를 심어주고 감자클래스안에 있는 10일뒤자라난다 라는 메서드를 호출 하는 ? 약간 이런식 같은 느낌 인것 같다. 그러다 감자의 10일뒤를 바로 자라나다 라고 바꾼다면 밭이라는 클래스에 10일뒤라는 매서드도 함께 수정해야 되듯 수정을 하면 같이 수정을 해야한다는 뭐 그런게 있다는게 저런것이 아닐까 하는 생각이다.

10, Polymorphism (다형성)
	고양이와 강아지는 포유류라는 것을 상속받았고, 포유류는 "울음"이라는 속성이 있다 가정한다면, 고양이는 야옹, 강아지는 멍멍 이라고 짖는다. 이것을 다형성이라고 하는것같다.

	운전면허증을 딸때 포터로 했으나 모닝을 탈수 있다.(o)
	리모콘 사용법만 알면 모든 리모콘을 사용할 수 있다.(o)
	ms word를 사용할줄 알면 아래한글을사용할 수 있다.(x) => ms, 아래한글은 다형성을 고려하지 않았다.

11. Encapuslation(캡슐화) / 절차은닉 / 정보은닉
	-절차은닉
	 입출력은 공개되고 진행 과정을 숨기는 것, 더쉽게 과정이 아닌 결과물?
	 사용방법만 open. 어떻게 구현되는 지 과정을 스킵. 결과물만 알면됨.
	 리모콘 전원버튼을 누르면 켜지네? 끝.
	 굳이 리모콘이 메인모드를 통해 어떤 값을 입력받고 어떤조건문을 통해 이딴거 필요없음.

	-정보은닉
	 말 그대로 정보를 은닉하다. 은닉하면 볼수 없어, 볼수 없으니까 수정을 못해! 그래서 데이터를 보호할수 있는 것!!!!!????!!?!?!?
	 마치 자판기처럼. 자판기는 내가 100원 넣었는데 200원짜릴 먹고싶다고 변경할수도 있기 때문에 그 자판기의 데이터를 보호하여 악용하는 사례, 버그같은 사례가 없어지는 것이 아닐까 하는 생각이다.
	 지나가는 사람한테 전화번호를 물어보는 행위ㅋㅋㅋㅋ?
	 아는사람이 계좌비밀번호 알려달라고 하면 안준다.
	 중요한 정보는 공개하지않음. 또한 수정할수도 없음.