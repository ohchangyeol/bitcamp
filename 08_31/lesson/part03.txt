//======================================//
1.DDL :: CREATE : TABLE 생성
//==> TABLE 생성
//==> SQL은 대소문자를 구별않음.
//==> 권장사항	: 예약어(keyword)	   : 대문자
		: 식별자(identifier) : 소문자

CREATE TABLE emp_test (
	id			NUMBER(3) ,
	name		VARCHAR2(15) ,
	salary		NUMBER(7,2) ,
	title		VARCHAR2(15)	DEFAULT	'사원' ,
	in_date		DATE			DEFAULT	 SYSDATE,
	dept_name	VARCHAR2(15)
);
DESC emp_test;
DESCRIBE emp_test;
SELECT * FROM emp_test;

//===============================
CREATE TABLE test_table(
);

CREATE TABLE test_table(
	no	NUMBER(10),
	contents	VARCHAR2(10)
);
================
DESC test_table; 보기

SELECT * FROM test_table;

DROP TABLE test_table; 테이블 삭제

DESC test_table; 보기

SELECT SYSDATE FROM DUAL; SYSDATE 현재 날짜 

SELECT 9*9 FROM DUAL; 연산

SELECT USER FROM DUAL; USER 사용자 계정

=============================
==> table 모든 column value 입력

INSERT 
INTO emp_test (id, name, salary, title, in_date, dept_name) 식별자 
	VALUES (1, '김사장', 100,'사장','04-07-19','개발부'); 식별자에 대한 값.

SELECT * FROM emp_test;
==============================
//==> 모든 컬럼에 벨류 입력 경우
==> 테이블 컬럼 리스트 생략 가능
INSERT 
INTO emp_test 식별자 
	VALUES (2, '홍길동', 1000,'부사장','2004/07/19','영업부');

SELECT * FROM emp_test;

==========================
==> 테이블 일부 컬럼 벨류 입력
INSERT 
INTO emp_test (id, name, salary)
	VALUES (3, '홍길순', 10000);

SELECT * FROM emp_test;

INSERT 
INTO emp_test (id, name,title)
	VALUES (4, '이순신', '장군');

SELECT * FROM emp_test;

========================
COMMIT 저장
ROLLBACK 저장한 지점 까지 취소.

========================
==> 키워드를 사용해서 벨류 입력
INSERT 
INTO emp_test 식별자 
	VALUES (2, USER, 1000,'부사장',SYSDATE,'영업부');

SELECT * FROM emp_test;
========================
==>null 입력 :: 묵시적 입력

INSERT 
INTO emp_test (id, name)
	VALUES (5, '장나라');

SELECT * FROM emp_test;

========================
==>NULL 또는 사용
INSERT 
INTO emp_test
	VALUES (6, '신나라',NULL, null, '','');

SELECT * FROM emp_test;

========================
==> 수정
UPDATE emp_test
SET id = 7
WHERE name = 'SCOTT'; 

COMMIT;
========================
==> 영업부를 관리부로 전부 변경.
UPDATE emp_test
SET DEPT_NAME = '관리부'
WHERE dept_name = '영업부'; 
========================
UPDATE emp_test
SET TITLE = '사장',SALARY = 2000, DEPT_NAME = '영업팀'
WHERE name = '홍길순'; 

========================
=========> 비교.
UPDATE emp_test
SET DEPT_NAME = '대기발령'
WHERE SALARY >= 1500 ; 

========================
=========> 전부다 바꾸기 where이 없다면 전체 적용.
UPDATE emp_test
SET title = '평사원';

SELECT * FROM emp_test;

ROLLBACK;

SELECT * FROM emp_test;
========================
====> null의 사직연산은 null;
UPDATE emp_test
SET SALARY = SALARY+500;

SELECT * FROM emp_test;

COMMIT;


========================
==> 부서명 없는 직원 대기발령     ===> 변경후 COMMIT
==> NULL 은 연산에서 제외    ==> NULL 비교는 false...
UPDATE emp_test
SET DEPT_NAME = '대기발령'
WHERE DEPT_NAME IS NULL;

SELECT * FROM emp_test;

COMMIT;
-----------------아닌것
UPDATE emp_test
SET DEPT_NAME = '대기발령'
WHERE DEPT_NAME IS NOT NULL;

SELECT * FROM emp_test;
===========================
// 행 삭제.
DELETE FROM emp_test
/*DELETE emp_test */
WHERE title ='장군';

SELECT * FROM emp_test;

--------and연산자
DELETE FROM emp_test
WHERE id >= 5 AND id <= 6;

SELECT * FROM emp_test;

--------OR연산자
DELETE FROM emp_test
WHERE id = 5 OR id = 6;

SELECT * FROM emp_test;

-------WHERE 이 없으면 전부다 삭제
DELETE FROM emp_test;

SELECT * FROM emp_test;

====================EXPRSSION 가공되어 나옴
SELECT 
name, salary, salary*12
FROM emp_test;

====================AS 엘리어스
SELECT 
name AS 이름, salary AS 월급, salary*12 AS 연봉
FROM emp_test;
--------------생략 가능
SELECT 
name 이름, salary 월급, salary*12 연봉
FROM emp_test;

------------- 스페이스바나 특수 문자 쓰고싶을땐 ""
SELECT 
name 이름, salary 월급, salary*12 "연봉 (성과급 제외)"
FROM emp_test;

===========
==>null 처리 함수 
==>null 인 경우, null 이 아닌 경우 처리
==>NVL NOTATION 

SELECT 
name, NVL(salary,0)
FROM emp_test;

----------==> 데이터타입 다름
SELECT 
name, NVL(salary,'무급')
FROM emp_test;
----------------
SELECT 
name, NVL2(salary,salary , 0) , NVL(salary,0)
FROM emp_test;

SELECT 
name, NVL2(salary,salary*12 , 0) , NVL(salary*12,0)
FROM emp_test;

SELECT 
name, NVL2(title,title ,'<직급없음>') , NVL(title ,'<직급없음>'), NVL2(title,'직급있음' ,'<직급없음>')
FROM emp_test;
==============DECODE if ~ else문? 
SELECT 
name, DECODE (title, NULL,'<직급없음>', '직급있음')
FROM emp_test;

------------------ifelse ~ else
SELECT 
name, DECODE (title, 
NULL,'<직급없음>',
'사장','회사의아버지',
'부사장','회사의어머니',
'직급있음'),title
FROM emp_test;

==========================
SELECT 
name||' '||title
FROM emp_test;

==============================
==> 중복제거
SELECT 
DISTINCT DEPT_NAME
FROM emp_test;

============================
SELECT 
DISTINCT NAME
FROM emp_test;
============================
INSERT 
INTO emp_test ( name, dept_name) 
VALUES ('홍길동','개발부');

SELECT 
NAME , dept_name
FROM emp_test;
---------------------------
SELECT 
DISTINCT NAME,dept_name
FROM emp_test;
==================================
//==> 어센딩 디센딩
SELECT 
name 이름,salary*12 연봉
FROM emp_test
ORDER BY salary*12 ASC;

----------------------

SELECT 
name 이름,salary*12 연봉
FROM emp_test
ORDER BY salary*12 DESC;

----------------------- 생략하면 디폴트 asc 
SELECT 
name 이름,salary*12 연봉
FROM emp_test
ORDER BY salary*12;


=============================
==> null 을 위로 보낼수도 있고아래로 보낼수도 있다
SELECT 
name 이름,salary*12 연봉
FROM emp_test
ORDER BY salary*12  DESC NULLS LAST;
------------------

SELECT 
name 이름,salary*12 연봉
FROM emp_test
ORDER BY salary*12  DESC NULLS FIRST;

SELECT * FROM emp_test;

========================
==> 내맘대로 편한거 선택
SELECT 
name 이름,salary*12 연봉
FROM emp_test
ORDER BY salary*12;

SELECT 
name 이름,salary*12 연봉
FROM emp_test
ORDER BY salary;

SELECT 
name 이름,salary*12 연봉
FROM emp_test
ORDER BY 연봉;

SELECT 
name 이름,salary*12 연봉
FROM emp_test
ORDER BY 2;

=======================
// ==> FROM emp_test 중요
SELECT 
name 이름,salary*12 연봉 , dept_name 부서
FROM emp_test
ORDER BY dept_name;

SELECT 
name 이름,salary*12 연봉 
FROM emp_test
ORDER BY dept_name;

=======================
//연봉 오름차
SELECT 
name 이름,salary*12 연봉 , dept_name 부서
FROM emp_test
ORDER BY salary;


// 연봉 오름차 후 부서 오름차
SELECT 
name 이름,salary*12 연봉 , dept_name 부서
FROM emp_test
ORDER BY salary, 부서;

// 부서 오름차순 후 연봉 오름차

SELECT 
name 이름,salary*12 연봉 , dept_name 부서
FROM emp_test
ORDER BY 부서,salary;